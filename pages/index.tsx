import Head from 'next/head'
// import Image from 'next/image'
import { useCallback, useMemo, useRef, useState, createRef } from 'react'
import { gsap } from 'gsap'
import type { MouseEvent } from 'react'

import { BgCanvas } from '../components/BgCanvas'

import { fetchGraphQL } from '~/lib/api'

export interface ItemImage {
  size: number
  url: string
  width: number
  height: number
}

export interface ItemData {
  title: string
  url: string
  description: string
  image: ItemImage
}

export interface Item {
  image: ItemImage
  el: HTMLLIElement | null
}

export default function Home(props: any): JSX.Element {
  const items = useRef<Item[]>(
    props.items.map((item: ItemData): Item => ({ image: item.image, el: null }))
  )
  const [selectedIndex, setSelectedIndex] = useState<number | undefined>(
    undefined
  )

  const tls = useRef<Map<HTMLLIElement | null, gsap.core.Timeline>>(new Map())

  const createTl = useCallback(
    (el: HTMLLIElement | null, index: number): void => {
      if (tls.current.has(el) || el == null) {
        return
      }

      const tl = gsap.timeline({
        paused: true,
      })

      const title = el.querySelector('.title-text')
      const titleCover = el.querySelector('.title-cover')
      const desc = el.querySelector('.desc-text')

      console.log(title, titleCover)

      gsap.set(title, {
        visibility: 'hidden',
      })

      gsap.set(titleCover, {
        transformOrigin: '0% 50%',
        scaleX: 0,
      })

      tl.to(titleCover, {
        duration: 0.3,
        scaleX: 1,
      })

      tls.current.set(el, tl)
    },
    []
  )

  const onMouseEnter = useCallback((event: MouseEvent, index: number): void => {
    console.log(index)
    setSelectedIndex(index)

    // const tl = tls.current[index]

    // if (tl instanceof gsap.core.Timeline) {
    //   tl.resume()
    // }

    tls.current.forEach(
      (tl: gsap.core.Timeline | null, el: HTMLLIElement | null): void => {
        console.log(el, event.currentTarget)

        if (tl instanceof gsap.core.Timeline) {
          if (el === event.currentTarget) {
            tl.resume()
          } else {
            tl.reverse()
          }
        }
      }
    )
  }, [])

  const onMouseLeave = useCallback(() => {
    setSelectedIndex(undefined)
  }, [])

  return (
    <article>
      <Head>
        <title>Portfolio Shader</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <BgCanvas
        className="fixed inset-0 w-full h-full pointer-events-none"
        bgImages={props.bgImages}
        contentImages={items.current}
        selectedIndex={selectedIndex}
      />
      <section
        className="fixed bottom-1 left-0 "
        style={{
          textOrientation: 'upright',
          writingMode: 'vertical-rl',
          textAlign: 'right',
        }}
      >
        <div>
          <a
            href="https://noliaki.netlify.app/about"
            target="_blank"
            rel="noreferrer"
            className="bg-black text-white hover:bg-white hover:text-black"
          >
            山田 典明
          </a>
        </div>
        <div>
          <a
            href="https://noliaki.netlify.app/product"
            target="_blank"
            rel="noreferrer"
            className="bg-purple-600 hover:bg-purple-50"
          >
            他作品
          </a>
        </div>
      </section>
      <section className="container max-w-screen-md mx-auto py-10">
        <ul>
          {props.items.map((itemData: ItemData, index: number) => {
            const classNames = ['content-item', 'relative']

            if (index !== 0) {
              classNames.push('mt-24')
            }

            if (selectedIndex === index) {
              classNames.push('is-active')
            }

            return (
              <li
                key={itemData.url}
                className={classNames.join(' ')}
                ref={(ref) => {
                  createTl(ref, index)
                  items.current[index].el = ref
                }}
                onMouseEnter={(event: MouseEvent) => onMouseEnter(event, index)}
                onMouseLeave={onMouseLeave}
              >
                <dl className="absolute top-6 -left-6 max-w-full content whitespace-pre-line">
                  <dt className="inline-block relative text-6xl overflow-hidden">
                    <span className="title-text">{itemData.title}</span>
                    <span className="title-cover absolute inset-0 w-full h-full bg-purple-600"></span>
                  </dt>
                  <dd className="desc-text overflow-hidden">
                    {itemData.description}
                  </dd>
                  <dd>
                    <a
                      href={itemData.url}
                      target="_blank"
                      rel="noreferrer noopener"
                    >
                      見る
                    </a>
                  </dd>
                </dl>
              </li>
            )
          })}
        </ul>
      </section>
    </article>
  )
}

export async function getStaticProps(): Promise<any> {
  const bgImages = await fetchGraphQL(
    `{
      backgroundImageCollection {
        items {
          image {
            url
            width
            height
          }
        }
      }
    }`
  )

  const items = await fetchGraphQL(
    `{
      artCollection {
        items {
          title
          url
          description
          image {
            size
            url
            width
            height
          }
        }
      }
    }`
  )

  return {
    props: {
      bgImages: bgImages?.data?.backgroundImageCollection?.items ?? [],
      items: items?.data?.artCollection?.items ?? [],
    },
  }
}
