import Head from 'next/head'
// import Image from 'next/image'
import { useCallback, useRef, useState } from 'react'

import { BgCanvas } from '../components/BgCanvas'

import { fetchGraphQL } from '~/lib/api'

export default function Home(props: any): JSX.Element {
  const items = [
    '/img/shader-art.webp',
    '/img/sp-controller.webp',
    '/img/cat-paticle.webp',
    '/img/voice-particle.webp',
    '/img/tokyo-2020.webp',
    '/img/rect-particle.webp',
  ]

  const imgEls = useRef<Array<HTMLLIElement | null>>([])
  const [selectedIndex, setSelectedIndex] = useState<number | undefined>(
    undefined
  )

  const onMouseEnter = useCallback((index: number): void => {
    console.log(index)
    setSelectedIndex(index)
  }, [])

  const onMouseLeave = useCallback(() => {
    setSelectedIndex(undefined)
  }, [])

  return (
    <article>
      <Head>
        <title>Portfolio Shader</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <BgCanvas
        className="fixed inset-0 w-full h-full pointer-events-none"
        bgImages={props.bgImages}
        contentImages={imgEls.current}
        selectedIndex={selectedIndex}
      />
      <section className="container max-w-screen-md mx-auto ">
        <ul>
          {items.map((src: string, index: number) => {
            const className = `opacity-0 shadow-2xl${
              index === 0 ? '' : ' mt-24'
            }`

            return (
              <li
                key={src}
                className={className}
                ref={(ref) => (imgEls.current[index] = ref)}
              >
                <button
                  onMouseEnter={(event) => onMouseEnter(index)}
                  onMouseLeave={onMouseLeave}
                >
                  <img
                    src={src}
                    width={1024}
                    height={576}
                    alt=""
                    className="mix-blend-exclusion"
                  />
                  {/* <Image
                  src={src}
                  alt=""
                  width={1024}
                  height={576}
                  layout="responsive"
                /> */}
                </button>
              </li>
            )
          })}
        </ul>
      </section>
    </article>
  )
}

export async function getStaticProps(): Promise<any> {
  const bgImages = await fetchGraphQL(
    `{
      backgroundImageCollection {
        items {
          image {
            url
            width
            height
          }
        }
      }
    }`
  )

  return {
    props: { bgImages: bgImages?.data?.backgroundImageCollection?.items ?? [] },
  }
}
